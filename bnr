#!/bin/bash

# This script reads from the config file and restores or backs up the . files

#TODOS
#6 - DONE - provide failed and successful logging capabilities
#2 - DONE - Write the logic to perform a safe expansion of the target path.
#4 - DONE - Write restore_backup
#5 - DONE - write individual scripts to copy/restore the dot files
#1 - DONE - Use the strict_read.sh to parse the input files.
#2 - DONE - write a binary search to go through the config_array for each item in ppa_soft_array
#3 - DONE - write the code for execution for -all

#flags
DISP_FLG=0
BACKUP_FLG=0
RESTORE_FLG=0
DBG_FLG=1
LOG_ERROR_FLG=1
ALL_FLG=0
MIRROR_FLG=0

#files and directories
INSTALL_LOG_FILE=installed_ppa.conf
DEFAULT_BACKUP_DIR="configfiles"
BACKUP_DIR=
BACKUP_SCRIPTS_DIR="config_scripts"
CONFIG_FILE=bnr-conf/bnr_list.conf
ERROR_LOG_FILE=backup.log
SUCCESS_LOG_FILE=bnr_success_list.conf
FAILED_LOG_FILE=bnr_failed_list.conf

#this array stores each line in the installed-ppa.log file
declare -a ppa_soft_array
declare -a config_array
config_array_count=0

#used in searching
SEARCH_INDEX_1=
SEARCH_INDEX_2=

if ! source "bash_helper_scripts/logger.sh"; then
    printf "Failed to load logger. Exiting\n"
    exit 1
fi

#this function prints the config_array for successful/unsuccessfull restore or backup in the
#same original file format
# takes three arguments
# 1 - 0 for failure only and 1 for successful installation only
# 2 - whether to log or print to console
# 3 - the index into the config_array
create_log() {
    local index=0
    local msg=
    local array_content=
    local msg=
    local success=
    local console=1

    if [ -n "$1" ]; then
	success="$1"
    else
	success=0
    fi

    if [ -n "$2" ]; then
	console="$2"
    fi

    if [ -n "$3" ]; then
	index="$3"
    else
	return 1
    fi
    
    array_content="${config_array[$index]}"
    if get_configfile_column_values "$array_content"; then
	msg="$(printf "%-*s %-*s %-*s %-*s" "$column1_value_max_len" "$column1_value_cname" "$column2_value_max_len" "$column2_value_cfilename" "$column3_value_max_len" "$column3_value_cprops" "$column4_value_max_len" "$column4_value_cconfig_filename")"
	if [ "$console" -eq 1 ]; then
	    printf "%s\n" "$msg"
	else
	    if [ "$success" -eq 1 ]; then
		printf "%s\n" "$msg" >> "$SUCCESS_LOG_FILE"
	    else
		printf "%s\n" "$msg" >> "$FAILED_LOG_FILE"
	    fi
	fi
    fi
}

#binary searches into the config_array for corresponding softwares so as to install them
#takes an argument to search for the software, returns 0 for success with the found index
#for the first occurence in global variable SEARCH_INDEX_1
#returns 1 if failed
#1 - the software to search for,
#2 - optional, start index
#3 - optional, end index
search_config_array(){
    if [ -z "$1" ]; then
	log_msg --msg="search_config(): input empty"
	return 1
    fi

    if [ -z "$2" ] || [ -z "$3" ]; then
	SEARCH_INDEX_1=
	search_config_array "$1" 0 $((config_array_count-1))
	return $?
    fi

    local soft="$1"
    local sIndex="$2"
    local eIndex="$3"
    local currSoft=

    if [ $sIndex -gt $eIndex ]; then
	return 1
    fi

    local q=$(($((sIndex+eIndex))/2))
    
    currSoft="${config_array[$q]}"
    get_configfile_column_values "$currSoft"
    currSoft="$column1_value_cname"

    if [ "$currSoft" \< "$soft" ]; then
	search_config_array "$soft" $((q+1)) $eIndex
	return $?
    elif [ "$currSoft" \> "$soft" ]; then
	search_config_array "$soft" $sIndex $((q-1))
	return $?
    else
	search_back $q "$soft"
	SEARCH_INDEX_1=$SEARCH_INDEX_2
	return $?
    fi
}

#this function searches back from the index in the config_array for the value given until it is
#different and returns the last index that matched, this index that last matched is saved in
#SEARCH_INDEX_2 returns 0 on success and 1 on failure takes two args,
#1 - the index to begin the search from and
#2 - the term to search for
search_back(){
    if [ -z "$1" ] || [ -z "$2" ]; then
	log_msg --msg="search_back(): Either of the required arguments are empty"
	exit 1
    fi

    local index="$1"
    local soft="$2"
    local currSoft=
    SEARCH_INDEX_2=

    if [ $index -eq 0 ]; then
	SEARCH_INDEX_2=$index
	return 0
    fi
    
    while [ $index -ge 0 ]; do
	currSoft="${config_array[$index]}"
	get_configfile_column_values "$currSoft"
	currSoft="$column1_value_cname"
	if [ "$currSoft" == "$soft" ]; then
	    ((index-=1))
	else
	    break
	fi
    done
    
    if [ $index -ge 0 ]; then
	SEARCH_INDEX_2=$((index+1))
	return 0
    fi
    return 1
}

#searches and prints
search_and_print(){
    local soft=
    local msg=
    local index=
    for index in ${!ppa_soft_array[@]}; do
	soft="${ppa_soft_array[$index]}"
	get_installfile_column_values "$soft"
	soft="$column1_value_name"

	if search_config_array "$soft"; then
	    msg=$(printf "For %s start index is %s.\n" "$soft" "$SEARCH_INDEX_1")
	    log_msg --msg="$msg"
	fi
    done
}

#this function calls the appropriate script
#accepts two arguments,
#1 - the software name
#2 - backup file name
#3 - source file name
#4 - 0 or 1, 0 for backup and 1 for restore
call_script(){

    local soft=
    local backup_file_name=
    local result=
    local script_path=

    if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
	log_msg -e --msg="call_script(): Required arguments not provided."
	return 1
    fi
    
    soft="$1"
    backup_file_name="$2"
    src_file_name="$3"

    if ! [ -d "$BACKUP_SCRIPTS_DIR" ]; then
	log_msg -e --msg="Backup scripts directory not present."
	return 1
    fi

    #get the absolute path for the backup script name
    script_path=$(printf "%s-bnr.sh" "$soft")
    script_path="$(cd "$BACKUP_SCRIPTS_DIR"; echo "$(pwd)/$script_path")"
    if ! [ -a "$script_path" ]; then
	msg=$(printf "No backup/restore script found for %s." "$soft")
	log_msg -e --msg="$msg"
	return 1
    fi

    local retVal=
    msg=$(printf "Calling \"bash %s %s %s\"\n" "$script_path" "$backup_file_name" "$4")
    log_msg --msg="$msg"
    result=$(bash "$script_path" "$backup_file_name" "$4" 2>&1)
    retVal="$?"
    if [ "$retVal" -ne 0 ]; then
    	msg=$(printf "Script failed with error:\n%s\n" "$result")
    	log_msg -e --msg="$msg"
    fi
    return "$retVal"
}

#restores backup of all software that are listed in the config2.txt and successfully installed.
#Successfull install data is obtained from the install.log.
#With the filename present, backups are restored by copying the backed up config files to their
#corresponding destination location present in the 4th column.
#If the directory is already present and similar files present in this directory, they're
#overwritten otherwise a new directory is created and files copied.
restore_backup_main(){
    if [ -z "$1" ]; then
	log_msg -e --msg="restore_backup_main(): Invalid arguments received."
	return 1
    fi

    #initialize
    local soft=
    local backup_file_name=
    local props=
    local src_file_name=
    local msg=
    local index=
    local result=
    local retVal=

    local tilde_expanded=0
    local raw_path=
    local parsed_file_path=
    local file_path_tilde_prefix=
    local expanded_file_path_tilde_prefix=    

    index="$1"
    soft="${config_array[$index]}"
    #printf "restore_backup_main(): Index %s soft is %s\n" "$index" "$soft"
    get_configfile_column_values "$soft"
    soft="$column1_value_cname"
    backup_file_name="$column2_value_cfilename"
    props="$column3_value_cprops"
    src_file_name="$column4_value_cconfig_filename"

    #get the canonicalized path
    if [ "$src_file_name" != '!' ]; then
	#printf "AABBSource_file_path: %s\n" "$src_file_name"
	#quoting parse the raw path
	if bash_quoting_parse "$src_file_name"; then
	    parsed_file_path="$quoting_parsed_string"
	else
	    msg=$(printf "bash_quoting_parse failed with error:%s" "$src_file_name")
	    log_msg -e --msg="$msg"
	    exit 1
	fi

	#safely expand file path
	#./..bash_helper_scripts/safe_tilde_expansion.sh "$src_file_filename" 1
	if result=$(bash_helper_scripts/safe_tilde_expansion.sh\
			"$src_file_name" 1); then
	    #get the prefix, the expanded prefix and the expanded file path
	    local str=
	    local index1=1
	    tilde_expanded=1
	    while read str; do
		#printf "Str is %s\n" "$str"
		if [ "$index1" -eq 1 ]; then
		    file_path_tilde_prefix="$str"
		elif [ "$index1" -eq 2 ]; then
		    expanded_file_path_tilde_prefix="$str"
		    #printf "Expanded prefix is %s\n" "$expanded_file_path_tilde_prefix"
		elif [ "$index1" -eq 3 ]; then
		    parsed_file_path="$str"
		fi
		((index1+=1))
	    done < <(echo "$result")		
	fi
	#get the canonicalized path (we can't verify whether it is there or not)
	src_file_name="$parsed_file_path"
	#msg="$(printf "Source_file_path: %s\n" "$src_file_name")"
	#log_msg --msg="$msg"
    fi

    #quoting parse the raw path
    if bash_quoting_parse "$backup_file_name"; then
	backup_file_name="$quoting_parsed_string"
    else
	msg=$(printf "bash_quoting_parse failed with error:%s" "$result")
	log_msg -e --msg="$msg"
	exit 1
    fi
    #if a mirroring was requested and a src file path is also present
    if [ "$src_file_name" != '!' ]; then
	local expanded_tilde_prefix=
	local relative_backup_path=
	if [ "$MIRROR_FLG" -eq 1 ]; then
	    if [ "$tilde_expanded" -eq 1 ]; then
		expanded_tilde_prefix="$expanded_file_path_tilde_prefix"
		relative_backup_path="$src_file_name"
	    elif [ "$tilde_expanded" -eq 0 ]; then
		#we also try to remove direct references to values that would've been same as
		#a tilde expansion from the given source file name
		expanded_tilde_prefix="$(bash_helper_scripts/safe_tilde_expansion.sh "~")"
		#if the src_file_name is relative to /, then we get the rest of the path to make
		#it relative to the backup dir
		local allbutfirst="${src_file_name#?}"
		if [ "${src_file_name%"$allbutfirst"}" == '/' ]; then
		    relative_backup_path="${src_file_name#?}"
		else
		    relative_backup_path="$backup_file_name"
		fi
		unset allbutfirst
	    fi
	    local path_without_tilde_expansion="${relative_backup_path#"$expanded_tilde_prefix"'/'}"
	    backup_file_name="$BACKUP_DIR"'/'"$path_without_tilde_expansion"
	else
	    backup_file_name="$BACKUP_DIR"'/'"$backup_file_name"
	fi
    else
	backup_file_name="$BACKUP_DIR"'/'"$backup_file_name"
    fi    

    #check if the backup file is present
    local file_prefix="$(dirname "$backup_file_name")"	    
    local file_name="${backup_file_name#"$file_prefix"'/'}"
    if ! src_file_dir="$(cd -P "$file_prefix" 2>&1 && \
	       	 		 if [ -e "$file_name" ]; then\
				    pwd;\
				 else\
				    exit 1;\
				 fi\
				)"; then
	
	msg=$(printf "Backup file \"%s\" for %s not found." "$backup_file_name" "$soft")
	log_msg -e --msg="$msg"
	create_log 0 0 "$index"
	return 1
    fi
    backup_file_name="$src_file_dir"/"$file_name"
    #msg="$(printf "Backup file path is %s\n\n" "$backup_file_name")"
    #log_msg --msg="$msg"
    #continue
    #msg="$(printf "Backup file path is %s\n\n" "$backup_file_name")"
    #log_msg --msg="$msg"

    #create the target directory to copy the files into
    file_prefix="$(dirname "$src_file_name")"
    if ! [ -d "$file_prefix" ]; then
	result="$(mkdir -p "$file_prefix" 2>&1)"
	if [ $? -ne 0 ]; then
	    msg="$(printf "Creating directory \"%s\" failed with error: %s" "$file_prefix" "$result")"
	    log_msg -e --msg="$msg"
	    create_log 0 0 "$index"
	    return 1
	fi
    fi

    msg=$(printf "Restoring config files for %s ..." "$soft")
    log_msg --msg="$msg"
    
    #now that the directory is created, we see if a script is required with sudo access
    get_config_props_values "$props"
    #if it requires a special script for creating a backup
    if [ "$props2_value_cscript" -eq 1 ]; then
	#call the script
	if call_script "$soft" "$backup_file_name" "$src_file_name" 1; then
	    create_log 1 0 "$index"
	    return 0
	else
	    create_log 0 0 "$index"
	    return 1
	fi
    fi

    local result=
    local retVal=1
    #if no script is required, we copy the backup file to the destination
    if [ "$props1_value_csudo" -eq 1 ]; then
	#TODO: There could potential issues here when the filepath used has unescaped characters
	#that wreak havoc when used in a command-line context. Tests needed.
	#DONE: Fix Sudo copying
	msg=$(printf "Executing \"sudo cp %s %s\"... " "$backup_file_name" "$src_file_name")
	log_msg --msg="$msg"
	result="$(sudo su -c "cp \"$backup_file_name\" \"$src_file_name\"" 2>&1)"
	retVal=$?
    else
	msg=$(printf "Executing \"cp %s %s\"... " "$backup_file_name" "$src_file_name")
	log_msg --msg="$msg"
	result=$(cp "$backup_file_name" "$src_file_name" 2>&1)
	retVal=$?
    fi
    if [ "$retVal" -ne 0 ]; then
	result="$(tr -d '\n' < <(echo "$result"))"
	msg=$(printf "Copying failed with error: %s" "$result")
	log_msg -e --msg="$msg"
	create_log 0 0 "$index"
	return 1
    else
	create_log 1 0 "$index"
    fi
    return 0
}

#the bootstrap function that calls restore_backup_main with the index into config_array for the
#line to be backed up
restore_backup(){
    local soft=
    local msg=
    local index=
    #unless all the lines/softs are required to be restored
    if [ "$ALL_FLG" -ne 1 ]; then	
	for index in ${!ppa_soft_array[@]}; do
	    soft="${ppa_soft_array[$index]}"
	    get_installfile_column_values "$soft"
	    soft="$column2_value_progname"

	    if search_config_array "$soft"; then
		#msg=$(printf "Start index for %s is %s." "$soft" "$SEARCH_INDEX_1")
		#log_msg --msg="$msg"
		#now that we have the start index, we've to take care of the config files
		#of all occurence for this software
		local index1="$SEARCH_INDEX_1"
		local currSoft="$soft"
		while [ "$currSoft" == "$soft" ]; do		    
		    restore_backup_main "$index1"
		    ((index1+=1))
		    if [ "$index1" -ge "$config_array_count" ]; then
			break;
		    fi
		    currSoft="${config_array[$index1]}"
		    get_configfile_column_values "$currSoft"
		    currSoft="$column1_value_cname"
		done
	    fi
	done
	#we need to process the $def$-* config entries
	for index in ${!config_array[@]}; do
	    soft="${config_array[$index]}"
	    get_configfile_column_values "$soft"
	    soft="$column1_value_cname"
	    local origIFS="$IFS"
	    IFS="-"
	    local defName=	    
	    for defName in $soft; do
		break    
	    done
	    IFS="$origIFS"
	    if [ -z "$defName" ] || [ "$defName" != "\$def\$" ]; then
		continue;
	    else		
		restore_backup_main "$index"
	    fi
	done
    else
	#if we need to restore all softs/lines
	for index in ${!config_array[@]}; do
	    #printf "Index in config_array is %s\n" "$index"
	    restore_backup_main "$index"
	done
    fi
}

#creates backup of all software that are listed in the config2.txt and present in the disk with the
#filename present backups are created by copying the config files to the /configfiles/ directory
#if the directory is already present and similar files present in this directory, they're
#overwritten otherwise a new directory is created and files copied
create_backup(){
    local soft=
    local backup_file_name=
    local props=
    local src_file_name=
    local src_file_dir=
    local msg=
    local index=
    local result=
    local retVal=
        
    for index in ${!config_array[@]}; do
	soft=
	soft="${config_array[$index]}"
	#printf "Softline at index %s is %s\n" "$index" "$soft"
	set +xv
	get_configfile_column_values "$soft"
	soft="$column1_value_cname"
	backup_file_name="$column2_value_cfilename"
	props="$column3_value_cprops"
	src_file_name="$column4_value_cconfig_filename"
	local raw_path=
	local parsed_file_path=
	local mirror_backup_dir=
	local tilde_expanded=0
	local mirror_backup_dir=
	local file_path_tilde_prefix=
	local expanded_file_path_tilde_prefix=
	tilde_expanded=0
	result=
	retVal=

	#check the backup dir exists and if not, create it
	if ! [ -d "$BACKUP_DIR" ]; then
	    local result=
	    local retVal=
	    result="$(mkdir "$BACKUP_DIR" 2>&1)"
	    if [ "$?" -ne 0 ]; then
		msg=$(printf "Unable to create directory with the following error.\n%s" "$result")
		log_msg -e --msg="$msg"
		return 1
	    else
		BACKUP_DIR="$(cd -P "$BACKUP_DIR"; pwd)"
	    fi
	else
	    BACKUP_DIR="$(cd -P "$BACKUP_DIR"; pwd)"
	fi

	#check if the source file exists and get the canonicalized path
	if [ "$src_file_name" != '!' ]; then
	    raw_path="$src_file_name"	    
	    #quoting parse the raw path
	    if bash_quoting_parse "$raw_path"; then
		parsed_file_path="$quoting_parsed_string"
	    else
		msg=$(printf "bash_quoting_parse failed with error:%s" "$result")
		log_msg -e --msg="$msg"
		exit 1
	    fi
	    
	    #safely expand file path
	    #..bash_helper_scripts/safe_tilde_expansion.sh "$raw_path" 1
	    if result=$(bash_helper_scripts/safe_tilde_expansion.sh\
			    "$raw_path" 1); then
		#get the prefix, the expanded prefix and the expanded file path
		local str=
		local index1=1
		tilde_expanded=1
		while read str; do
		    #printf "Str is %s\n" "$str"
		    if [ "$index1" -eq 1 ]; then
			file_path_tilde_prefix="$str"
		    elif [ "$index1" -eq 2 ]; then
			expanded_file_path_tilde_prefix="$str"
			#printf "Expanded prefix is %s\n" "$expanded_file_path_tilde_prefix"
		    elif [ "$index1" -eq 3 ]; then
			parsed_file_path="$str"
		    fi
		    ((index1+=1))
		done < <(echo "$result")	
	    fi
	    #get the canonicalized path
	    #get the filename
	    #local unexpanded_file_prefix="$(dirname "$parsed_file_path")"
	    local file_prefix="$(dirname "$parsed_file_path")"	    
	    local file_name="${parsed_file_path#"$file_prefix"'/'}"
	    if ! src_file_dir="$(cd -P "$file_prefix" 2>&1 && \
	       	 		 if [ -a "$file_name" ]; then\
				    pwd;\
				 else\
				    exit 1;\
				 fi\
				)"; then
		#\ || ! (cd -P "$unexpanded_file_prefix"); then
		msg=$(printf "Source file %s for %s not found." "$parsed_file_path" "$soft")
		log_msg --msg="$msg"
		create_log 0 0 "$index"
		continue
	    fi
	    #printf "Parsed_file_dir: %s\n" "$src_file_dir"
	    src_file_name="$src_file_dir"'/'"$file_name"
	    #msg="$(printf "Source_file_path: %s\n" "$src_file_name")"
	    #log_msg --msg="$msg"
	fi

	#get the backup file dir

	#quoting parse the raw path
	if bash_quoting_parse "$backup_file_name"; then
	    backup_file_name="$quoting_parsed_string"
	else
	    msg=$(printf "bash_quoting_parse failed with error:%s" "$result")
	    log_msg -e --msg="$msg"
	    exit 1
	fi
	#if a mirroring was requested and a src file path is also present
	if [ "$src_file_name" != '!' ]; then
	    local expanded_tilde_prefix=
	    local relative_backup_path=
	    if [ "$MIRROR_FLG" -eq 1 ]; then
		if [ "$tilde_expanded" -eq 1 ]; then
		    expanded_tilde_prefix="$expanded_file_path_tilde_prefix"
		    relative_backup_path="$src_file_name"
		elif [ "$tilde_expanded" -eq 0 ]; then
		    #we also try to remove direct references to values that would've been same as
		    #a tilde expansion from the given source file name
		    expanded_tilde_prefix="$(bash_helper_scripts/safe_tilde_expansion.sh "~")"
		    #if the src_file_name is relative to /, then we get the rest of the path to make
		    #it relative to the backup dir
		    local allbutfirst="${src_file_name#?}"
		    if [ "${src_file_name%"$allbutfirst"}" == '/' ]; then
			relative_backup_path="${src_file_name#?}"
		    else
			relative_backup_path="$backup_file_name"
		    fi
		    unset allbutfirst
		fi
	 	local path_without_tilde_expansion="${relative_backup_path#"$expanded_tilde_prefix"'/'}"
		backup_file_name="$BACKUP_DIR"'/'"$path_without_tilde_expansion"
	    else
		backup_file_name="$BACKUP_DIR"'/'"$backup_file_name"
	    fi
	else
	    backup_file_name="$BACKUP_DIR"'/'"$backup_file_name"
	fi
	#msg="$(printf "Backup file path is %s\n\n" "$backup_file_name")"
	#log_msg --msg="$msg"
	#continue

	#create the relative backup directory(ies) if it doesn't exist yet	
	local backup_dir="$(dirname "$backup_file_name")"
	if ! [ -d "$backup_dir" ]; then
	    result="$(mkdir -p "$backup_dir" 2>&1)"
	    if [ $? -ne 0 ]; then
		msg="$(printf "Creating directory \"%s\" failed with error: %s" "$backup_dir" "$result")"
		log_msg -e --msg="$msg"
		create_log 0 0 "$index"
		continue
	    fi
	fi
	
	msg=$(printf "Backing up %s... " "$soft")
	log_msg --msg="$msg"

	#create the backup
	get_config_props_values "$props"
	retVal=
	#if it requires a special script for creating a backup
	if [ "$props2_value_cscript" -eq 1 ]; then
	    #call the script
	    if ! call_script "$soft" "$backup_file_name" "$src_file_name" 0; then
		create_log 0 0 "$index"
	    else
		create_log 1 0 "$index"
	    fi
	else
	    #create the backup
	    msg=$(printf "Executing \"cp %s %s\"... " "$src_file_name" "$backup_file_name")
	    log_msg --msg="$msg"
	    result=$(cp "$src_file_name" "$backup_file_name" 2>&1)
	    retVal=$?
	    if [ "$retVal" -ne 0 ]; then
		msg=$(printf "Error copying \"%s\" to \"%s\"." "$src_file_name" "$backup_file_name")
		log_msg -e --msg="$msg"
		create_log 0 0 "$index"
	    else
		create_log 1 0 "$index"
	    fi
	fi
    done
    return 0
}

#this function retrieves the column value from the given line from the config-config file
#and saves it in the variable columnx_value where x ranges from 1 to 6
#accepts one argument,
#1-the ppa_line from where the values are needed
#returns 0 for success and non-zero for failure
column1_value_cname=
column2_value_cfilename=
column3_value_cprops=
column4_value_cconfig_filename=
column5_value_clineno=

#the length
column1_value_max_len=0
column2_value_max_len=0
column3_value_max_len=0
column4_value_max_len=0

get_configfile_column_values() {
    local msg=
    #initialize
    column1_value_cname=
    column2_value_cfilename=
    column3_value_cprops=
    column4_value_cconfig_filename=
    column5_value_clineno=
    local column_count=1
    if [ -z "$1" ]; then
	log_msg -e --msg="get_configfile_column_values(): Incorrect arguments received"
	exit 1
    fi
    local column=
    #printf "Received column_line is %s\n" "$1"
    strict_read --field='\t,\s' --line="\n" --group='"' --esc < <(printf "%s" "$1")
    while strict_get; do	
	if [ -z "$strict_line" ]; then
	    msg=$(printf "get_configfile_column_values(): No value found for given line.")
	    log_msg -e --msg="$msg"
	    return 1
	fi
	local index=0
	for index in "${!strict_line[@]}"; do
	    column="${strict_line[$index]}"
	    #printf "Word at index %s is %s\n" "$index" "$column"
	    if [ $column_count -eq 1 ]; then
		column1_value_cname="$column"
	    elif [ $column_count -eq 2 ]; then
		column2_value_cfilename="$column"
	    elif [ $column_count -eq 3 ]; then
		column3_value_cprops="$column"
	    elif [ $column_count -eq 4 ]; then
		column4_value_cconfig_filename="$column"
	    elif [ $column_count -eq 5 ]; then
		column5_value_clineno="$column"
	    fi
	    ((column_count+=1))
	    #printf "get_configfile_column_values(): Column_Count is %s and column is %s\n" "$column_count" "$column"
	done
    done
    if [ $column_count -ne 6 ]; then
	msg=$(printf "get_configfile_column_values: Expected values for columns not received for %s." "$column1_value_name")
	#printf "get_configfile_column_values(): Column_Count is %s and column is %s\n" "$column_count" "$column"
	log_msg -e --msg="$msg"
	return 1
    fi
    #printf "get_configfile_column_values(): Column_Count is %s and column is %s\n" "$column_count" "$column"
    return 0
}

#this function gets the property flags form the property column
#saves these values in the varaibles propsx_value where x goes from 1 to 2
#accepts two arguments,
#1-the props value from the Properties column,
#2-the line no
#returns 0 for success and non-zero for failure
props1_value_csudo=
props2_value_cscript=

get_config_props_values() {
    local msg=
    local props_count=1
    local orig_IFS="$IFS"
    #initialize
    props1_value_csudo=
    props2_value_cscript=

    if [ -z "$1" ]; then
	msg=$(printf "get_config_props_value(): Required arguments are empty\n")
	log_msg -e --msg="$msg"
	return 1
    fi

    IFS=:
    for props in $1; do
	if [ $props_count -eq 1 ]; then
	    props1_value_csudo=$props
	elif [ $props_count -eq 2 ]; then
	    props2_value_cscript=$props
	fi
	((props_count+=1))
    done
    IFS="$orig_IFS"
    
    if [ $props_count -ne 3 ]; then
	msg=$(printf "get_config_props_value(): Error when parsing properties.")
	if [ -n "$2" ]; then
	    log_msg -e --msg="$msg" --line="$2"
	else
	    log_msg -e --msg="$msg"
	fi
	IFS="$orig_IFS"
	return 1
    fi

    return 0
}

#this function prints the config_array
print_config_array() {
    local index=0
    for index in ${!config_array[@]}; do
	create_log 0 1 "$index"
    done
}

#this function retrieves the column value from the give ppa_line and saves it in the variable columnx_value where x ranges from 1 to 8
#accepts two arguments,
#1-the ppa_line from where the values are needed
#returns 0 for success and non-zero for failure
column1_value_name=
column2_value_progname=
column3_value_ppa=
column4_value_toi=
column5_value_props=
column6_value_lineno=
column7_value_ppastatus=
column8_value_installstatus=

#the raW version
column1_value_name_raw=
column2_value_progname_raw=
column3_value_ppa_raw=
column4_value_toi_raw=
get_installfile_column_values() {
    #initialize
    column1_value_name=
    column2_value_progname=
    column3_value_ppa=
    column4_value_toi=
    column5_value_props=
    column6_value_lineno=
    column7_value_ppastatus=
    column8_value_installstatus=
    local column_raw=
    
    local column_count=1
    if [ -z "$1" ]; then
	log_msg --msg="get_installfile_column_values(): Incorrect or invalid arguments received"
	return 1
    fi

    column_count=1
    for column in $1; do
	if [ -z "$column" ]; then
	    msg=$(printf "get_installfile_column_values(): No value found for column %s\n" "$column_count")
	    log_msg -e --msg="$msg"
	    return 1
	fi

	column_raw="$column"
	if bash_quoting_parse "$column"; then
	    column="$quoting_parsed_string"
	else
	    msg=$(printf "bash_quoting_parse failed with error:%s" "${strict_line[$index]}")
	    log_msg -e --msg="$msg"
	    exit 1
	fi
	
	if [ $column_count -eq 1 ]; then
	    column1_value_name="$column"
	    column1_value_name_raw="$column_raw"
	elif [ $column_count -eq 2 ]; then
	    column2_value_progname="$column"
	    column2_value_progname_raw="$column_raw"
	elif [ $column_count -eq 3 ]; then
	    column3_value_ppa="$column"
	    column3_value_ppa_raw="$column_raw"
	elif [ $column_count -eq 4 ]; then
	    column4_value_toi="$column"
	    column4_value_toi_raw="$column_raw"
	elif [ $column_count -eq 5 ]; then
	    column5_value_props="$column"
	elif [ $column_count -eq 6 ]; then
	    column6_value_lineno="$column"
	elif [ $column_count -eq 7 ]; then
	    column7_value_ppastatus="$column"
	elif [ $column_count -eq 8 ]; then
	    column8_value_installstatus="$column"
	fi
	((column_count+=1))
    done
    ((column_count-=1))    
    if [ "$column_count" -ne 8 ]; then
	msg=$(printf "More than expected values for columns received for %s." "$column1_value_name")
	log_msg -e --msg="$msg"
	return 1
    fi
    return 0
}

#this function prints the ppa_soft_array
print_ppa_soft_array() {
    local index=0
    local msg=
    local array_content=
    local msg=
    local header=0
    local ppa_comments=
    local props_col_len=12
    local lineno_str="LineNo"
    local lineno_col_len="${#lineno_str}"

    for index in "${!ppa_soft_array[@]}"; do
	array_content="${ppa_soft_array[$index]}"
	if [ -z "$array_content" ]; then
	    msg="$(printf "Array entry %s is empty\n" "$index")"
	    log_msg -e --msg="$msg"
	    continue;
	fi
	ppa_comments="${ppa_soft_array_msg[$index]}"
	if [ "$ppa_comments" != "!" ]; then
	    ppa_comments="MSG"
	fi
	if get_installfile_column_values "$array_content"; then
	    if [ $header -eq 0 ]; then
		printf "%-*s %-*s %-*s %-*s %-*s %-*s %s\n" "$column1_length_max" "Name" "$column2_length_max" "ProgName" "$column3_length_max" "PPA" "$column4_length_max" "TOI" "$props_col_len" "Property" "$lineno_col_len" "$lineno_str" "Comments"
		header=1
	    fi
	    printf "%-*s %-*s %-*s %-*s %-*s %-*s %s\n" "$column1_length_max" "$column1_value_name_raw" "$column2_length_max" "$column2_value_progname_raw" "$column3_length_max" "$column3_value_ppa_raw" "$column4_length_max" "$column4_value_toi_raw" "$props_col_len" "$column5_value_props" "$lineno_col_len" "$column6_value_lineno" "$ppa_comments"
	fi
    done
}

#sorts the config array based on the first column value
sort_config_array(){
    local index=0
    declare -a local_config_array
    #create a local copy of the config array
    for index in ${!config_array[@]}; do
	local_config_array[$index]="${config_array[$index]}"
    done

    #create an array where each entry is the first column
    #and the index of it in config_array
    local msg=
    local word=
    for index in "${!config_array[@]}"; do
	for word in ${config_array[$index]}; do
	    if bash_quoting_parse "$word"; then
		word="$quoting_parsed_string"
	    fi
	    break
	done
	if [ -n "$word" ]; then
	    msg+="$(printf "%s %s" "$word" "$index")"$'\n'
	fi
    done

    #sort this array and update config_array based
    #on the order in which it appears
    local sorted_line
    local index1=0
    local index2=
    local actual_index=
    while read sorted_line; do
	if [ -n "$sorted_line" ]; then
	    index2=1
	    for word in $sorted_line; do
		if [ "$index2" -eq 2 ]; then
		    actual_index="$word"
		    #printf "Target index is %s and actual Index is %s\n" "$index1" "$actual_index"
		    config_array[$index1]="${local_config_array[$actual_index]}"
		    #printf "NewEntry is %s\n" "${local_config_array[$actual_index]}"
		    ((index1+=1))
		fi
		((index2+=1))
	    done
	fi
    done < <(echo "$msg" | sort)
}

column1_length_max=0
column2_length_max=0
column3_length_max=0
column4_length_max=0

#function to parse the installed-log file
parse_install_file() {
    if strict_read --field="\t,\s" --group='"' --line="\n" --comment="#" --esc < "$INSTALL_LOG_FILE"; then
	while strict_get; do
	    #if the line is not empty
	    if [ -z "$strict_line" ]; then
		continue;
	    fi
	    local msg=
	    local index=
	    local comments=
	    local curr_elem_len=0
	    for index in "${!strict_line[@]}"; do
		#printf "Line is %s\n" "${strict_line[*]}"
		#printf "asdasdasdasd: %s\n" "${strict_line[$index]}"
		curr_elem_len="${#strict_line[$index]}"
		local result="$(bash_quoting_parse "${strict_line[$index]}" 2>&1)"
		local retVal=$?
		if [ "$retVal" -ne 0 ]; then
		    msg=$(printf "bash_quoting_parse failed with error:%s" "$result")
		    log_msg -e --msg="$msg"
		    exit 1
		fi
		case $index in
		    0) if [ $column1_length_max -lt $curr_elem_len ]; then
			   column1_length_max=$curr_elem_len
		       fi
		       msg+=$(printf "%s " "${strict_line[$index]}");;
		    1) if [ $column2_length_max -lt $curr_elem_len ]; then
			   column2_length_max=$curr_elem_len
		       fi
		       msg+=$(printf "%s " "${strict_line[$index]}");;
		    2) if [ $column3_length_max -lt $curr_elem_len ]; then
			   column3_length_max=$curr_elem_len
		       fi
		       msg+=$(printf "%s " "${strict_line[$index]}");;
		    3) if [ $column4_length_max -lt $curr_elem_len ]; then
			   column4_length_max=$curr_elem_len
		       fi
		       msg+=$(printf "%s " "${strict_line[$index]}");;
		    4) msg+=$(printf "%s " "${strict_line[$index]}");;
		    5) msg+=$(printf "%s 0 0" "$strict_index")
		       #column 5 is the comments which is saved in a separate array but indexed
		       #with the same index number
		       comments=$(printf "%s" "${strict_line[$index]}");;
		    *) msg="$(printf "parse_file(): Error parsing file. Quitting. Line:%s\n" "$acc_val")"
		       log_msg -e --msg="$msg" -l "$strict_index";
		       exit 1;;
		esac		
	    done
	    ppa_soft_array[$ppa_soft_array_count]="$msg"
	    ppa_soft_array_msg[$ppa_soft_array_count]="$comments"
	    ((ppa_soft_array_count+=1))
	done
    else
	log_msg -e --msg="parse_file(): strict_read failed."
	exit 1
    fi
    return 0
}

#function to parse the 
parse_config_file(){
    #perform a strict read with tabs and spacesa as the field separators, new-line char as the EOL,
    #removing any comments beginning with the # character and group items within "
    if strict_read --field="\t,\s" --line="\n" --comment="#" --group='"' --esc < "$CONFIG_FILE"; then
	while strict_get; do
	    #if the line is not empty
	    if [ -z "$strict_line" ]; then
		continue;
	    fi
	    local msg=
	    local index=0
	    #we're supposed to get exactly 4 columns/words
	    for index in "${!strict_line[@]}"; do
		local val="${strict_line[$index]}"
		local curr_elem_len="${#strict_line[$index]}"
		
		if result=$(bash_quoting_parse "$val"); then
		    :
		else
		    msg=$(printf "bash_quoting_parse failed with error:%s" "$result")
		    log_msg -e --msg="$msg"
		    exit 1
		fi

		#see if we received the right number of words and measure the length
		case $index in
		    0) if [ "$column1_value_max_len" -lt "$curr_elem_len" ]; then
			   column1_value_max_len="$curr_elem_len"
		       fi
		       msg+=$(printf "%s " "${strict_line[$index]}");;
		    1) if [ "$column2_value_max_len" -lt "$curr_elem_len" ]; then
			   column2_value_max_len="$curr_elem_len"
		       fi
		       msg+=$(printf "%s " "${strict_line[$index]}");;
		    2) if [ "$column3_value_max_len" -lt "$curr_elem_len" ]; then
			   column3_value_max_len="$curr_elem_len"
		       fi
		       msg+=$(printf "%s " "${strict_line[$index]}");;
		    3) if [ "$column4_value_max_len" -lt "$curr_elem_len" ]; then
			   column4_value_max_len="$curr_elem_len"
		       fi
		       msg+=$(printf "%s %s" "${strict_line[$index]}" "$strict_index");;
		    *) log_msg -e --msg="parse_config_file(): Error parsing line. Quitting." --line="$strict_index"
		       exit 1;;
		esac
	    done
	    config_array[$config_array_count]="$msg"
	    ((config_array_count+=1))
	done
    else
	log_msg -e --msg="parse_config_file(): strict_read failed"
	exit 1
    fi
    print_config_array
    sort_config_array
    printf "\n"
    print_config_array
    exit 1
}

main() {
    #parse the args
    parse_args "$@"

    #if both backup and restore are enabled, quit
    if [ "$BACKUP_FLG" -eq 1 ] && [ $"$RESTORE_FLG" -eq 1 ]; then
	display_help_message
	exit 1
    fi
    
    #check if the install log file exists or not
    if [ "$ALL_FLG" -ne 1 ]; then
	if [ -z "$INSTALL_LOG_FILE" ] || ! [ -s "$INSTALL_LOG_FILE" ]; then
	    log_msg -e --msg="Install log file doesn't exist."
	    exit 1
	fi
    fi

    #check if the config file exists or not
    if [ -z "$CONFIG_FILE" ] || ! [ -s "$CONFIG_FILE" ]; then
	log_msg -e --msg="Config file doesn't exist."
	exit 1
    else
	: #printf "Config file is %s\n" "$CONFIG_FILE"
    fi

    #source in the strict_read file for use later
    source "bash_helper_scripts/strict_read.sh"
    #source in bash_quoting_parsing
    source "bash_helper_scripts/bash_quoting_parsing.sh"
    
    #parse the file(s)
    if [ "$ALL_FLG" -ne 1 ]; then
	parse_install_file
    fi
    parse_config_file

    #display installed soft array
    if [ "$DISP_FLG" -eq 1 ]; then
	if [ "$ALL_FLG" -ne 1 ]; then
	    print_ppa_soft_array
	    printf "\n"
	fi
	print_config_array
    fi

    #create backup
    if [ "$BACKUP_FLG" -eq 1 ];then
	#create_backup
	#printf "Backup requested\n"
	create_backup
    fi

    #restore backup
    if [ "$RESTORE_FLG" -eq 1 ];then
	#printf "Restore requested\n"
	printf "\n"
	restore_backup
    fi
}


#Due to the requirement of parsing arguments passed and with the restriction that getopt has some
#different way of parsing and outputting the optional parameter passed to short options, we are
#limiting the way arguemnts can be passed in unambiguously - See man getopt
display_help_message(){
    printf "Description:\n------------\n\tThis script creates and restores backup based on a config file. The script parses the config file to do this. Output includes a log file which outputs failed backups or restorations.\n\nUsage:\n------\n\t./backup-soft.sh arguments\n\nArguments\n---------\n\t-h or --help\t\t\t\t- Display this message and quit.\n\t--installlog=install-log-file-path\t- The file to be used for determining the programs for which the configuration needs to be restored or backed up. By default, the script looks for the file installed-ppa.log\n\t--all\t\t\t\t\t- Install all entries in the configfile. If this is the case, the install log file is ignored.\n\t--configfile=config-file-path\t\t- The configuratoin fgile for this script. By default, the script looks for the file config-config.\n\t--list\t\t\t\t- Display the contents of the install log file and config file.\n\t--restore\t\t\t\t- Restores the configuration for programs found in argument for --installlog based on the configuration from argument for --configfile.\n\t--backup\t\t\t\t- Creates a backup by copying the configuration files based on the configuration from argument for --configfile\n\nNOTE: You cannot create and restore backup at the same time. Only either can be done.\n"
}

# read the options, parse them and set some global variables
parse_args(){
    local install_log_file=
    local config_file=
    local args="$@"
    
    if [ -z "$args" ]; then
	display_help_message
	exit 0
    fi

    local parsed_args=$(getopt -o h -l list,restore,help,backup,all,mirror,backupdir:,installlog:,configfile: -n 'backup-soft' -- "$@" 2>&1)

    #remove any new-line chars
    parsed_args="$(tr -d '\n' < <(echo "$parsed_args"))"
    eval set -- $parsed_args

    local type_arg=
    local valid_args=0
    while [ -n "$1" ]; do
	case "$1" in
	    -h | --help) display_help_message; exit 0; ;;
	    --list) DISP_FLG=1; shift; valid_args=1;;
	    --restore) RESTORE_FLG=1; shift; valid_args=1;;
	    --backup) BACKUP_FLG=1; shift; valid_args=1 ;;
	    --all) ALL_FLG=1; shift; valid_args=1;;	    
	    --configfile) config_file=$2; shift 2; valid_args=1;;
	    --installlog) install_log_file=$2; shift 2; valid_args=1;;
	    --mirror) MIRROR_FLG=1; shift 1; valid_args=1;;
	    --backupdir) BACKUP_DIR="$2"; shift 2; valid_args=1;;
	    --) shift ;;
	    *) printf "Invalid arguments received. Use -h or --help to see usage.\n"; exit 0;;
	esac
    done

    if [ $valid_args -eq 0 ]; then
	printf "Invalid/no arguments received. Use -h or --help to see usage.\n"
	exit 1;
    fi
    
    #remove leading and trailing '
    if [ -n "$config_file" ]; then
	temp="${config_file#\'}"
	temp="${temp%\'}"
        config_file="$temp"
	CONFIG_FILE="$config_file"
    fi

    if [ $ALL_FLG -ne 1 ] && [ -n "$install_log_file" ]; then
	temp="${install_log_file#\'}"
	temp="${temp%\'}"
        install_log_file="$temp"
	INSTALL_LOG_FILE="$install_log_file"
    fi

    if [ -n "$BACKUP_DIR" ]; then
	temp="${BACKUP_DIR#\'}"
	temp="${temp%\'}"
        BACKUP_DIR="$temp"
    else
	BACKUP_DIR="$DEFAULT_BACKUP_DIR"
    fi
}

main "$@"
